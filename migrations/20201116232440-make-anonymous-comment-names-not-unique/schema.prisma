// https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client"
}

model Admin {
  id         String   @id @default(cuid())
  email      String   @unique
  username   String   @unique
  password   String
  sites      Site[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("admins")
}

model Site {
  id         String   @id @default(cuid())
  hostname   String   @unique
  verified   Boolean  @default(false)
  dns_tag    String   @unique @default(uuid())
  admin      Admin    @relation(fields: [admin_id], references: [id])
  admin_id   String
  posts      Post[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("sites")
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  username   String    @unique
  password   String
  comments   Comment[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@map("users")
}

model Comment {
  @@map("comments")

  id               String   @id @default(cuid())
  parent           Comment? @relation("CommentToComment", fields: [commentId], references: [id])
  author           User?    @relation(fields: [userId], references: [id])
  anon_author_name String
  body             String   @default("")
  votes            Int      @default(0)
  post             Post     @relation(fields: [post_id], references: [id])
  post_id          String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  Comment   Comment[] @relation("CommentToComment")
  commentId String?
  userId    String?
}

model Post {
  id         String    @id @default(cuid())
  url_slug   String    @unique
  site       Site      @relation(fields: [site_id], references: [id])
  site_id    String
  comments   Comment[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@map("posts")
}
